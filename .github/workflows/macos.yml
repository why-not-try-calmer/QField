---
name: üçé MacOS
on:
  push:
    branches:
      - master
      - release-**
  pull_request:
  release:
    types: ['published']


jobs:
  build:
    runs-on: macos-11

    steps:
      - name: üê£ Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: üåæ Prepare vars
        id: vars
        run: |
          ./scripts/ci/env_gh.sh

          BUILD_ROOT="/Users/runner"
          echo "BUILD_ROOT=${BUILD_ROOT}" >> $GITHUB_ENV
          echo "BUILD_TYPE=Release" >> $GITHUB_ENV

          echo "CMAKE_BUILD_DIR=${BUILD_ROOT}/builddir" >> $GITHUB_ENV

      - name: üê© Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: üî® Prepare build env
        run: |
          brew install automake bison flex gnu-sed create-dmg autoconf-archive
          echo $(brew --prefix bison)/bin >> $GITHUB_PATH
          echo $(brew --prefix flex)/bin >> $GITHUB_PATH

      - name: ‚öí Setup XCode
        uses: maxim-lobanov/setup-xcode@v1.5.1
        with:
          xcode-version: latest-stable

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-macos
          max-size: 200M

      - uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATES_FILE_BASE64_DEV }}
          p12-password: ${{ secrets.IOS_CERTIFICATES_PASSWORD_DEV }}

      - uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: ch.opengis.qfield
          issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üå± Install dependencies and generate project files
        run: |
          source ./scripts/version_number.sh
          source ./scripts/ci/generate-version-details.sh

          cmake -S "${{ github.workspace }}" \
                -B "${CMAKE_BUILD_DIR}" \
                -G Xcode \
                -T buildsystem=1 \
                -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -D WITH_VCPKG=ON \
                -D WITH_SPIX=ON \
                -D APP_VERSION="${APP_VERSION}" \
                -D APP_VERSION_STR="${APP_VERSION_STR}" \
                -D APP_PACKAGE_NAME="${APP_PACKAGE_NAME}" \
                -D ENABLE_TESTS=ON \
                -D NUGET_USERNAME=opengisch \
                -D NUGET_TOKEN=${{ secrets.GITHUB_TOKEN }} \
                -D SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
                -D SENTRY_ENV="${APP_ENV}" \
                -D MACOS_CODE_SIGN_IDENTITY="${{ secrets.IOS_CODE_SIGN_IDENTITY_DEV }}" \
                -D CMAKE_CXX_VISIBILITY_PRESET=hidden \
                -D WITH_CCACHE=ON

      - name: üìë Upload dep build logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-logs-x64-osx
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/**/*.log

      - name: üåã Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config ${{ env.BUILD_TYPE }}

      - name: üß´ Test
        env:
          PROJ_LIB: ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/x64-osx/share/proj
          QFIELD_SYSTEM_SHARED_DATA_PATH: ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/x64-osx/share
        run: |
          pip install -r "${{ github.workspace }}/test/spix/requirements.txt"
          cd "${{ env.CMAKE_BUILD_DIR }}"
          ctest --output-on-failure -C ${{ env.BUILD_TYPE }}

      - name: üì¶ Package
        run: |
          cmake --build  "${{ env.CMAKE_BUILD_DIR }}" --target bundle --config ${{ env.BUILD_TYPE }}
              echo "ARTIFACT_PATHNAME=${{ env.CMAKE_BUILD_DIR }}/QField-Installer.dmg" >> $GITHUB_ENV
              echo "ARTIFACT_NAME=qfield-${{ env.CI_PACKAGE_FILE_SUFFIX }}-macos.dmg" >> $GITHUB_ENV

#      - name: üîí Notarize Release Build
#        uses: m-kuhn/notarize-build@main
#        with:
#          app-path: ${{ env.ARTIFACT_PATHNAME }}
#          issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
#          api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
#          api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

      - name: üìë Upload package logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: package-logs-x64-osx
          path: ${{ env.BUILD_ROOT }}/builddir/_CPack_Packages/**/*.log

      - name: üì¶ Upload package
        if: ${{ env.ARTIFACT_NAME != null }}
        uses: actions/upload-artifact@v3
        with:
          name: "QField-dev-x64-osx-${{ env.BUILD_TYPE }}"
          path: ${{ env.ARTIFACT_PATHNAME }}

      - name: üìä Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "test-report-x64-osx-${{ env.BUILD_TYPE }}"
          path: "${{ env.CMAKE_BUILD_DIR }}/report"

      - name: üöÄ Upload release asset
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v') && env.ARTIFACT_NAME != null
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATHNAME }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          overwrite: true

      - name: ‚ôæÔ∏è Upload debug symbols
        # if: release or labeled PR
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          export INSTALL_DIR=$(pwd)
          curl -sL https://sentry.io/get-cli/ | bash
          ./sentry-cli upload-dif -o opengisch -p qfield ${{ env.CMAKE_BUILD_DIR }}
